// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IM.Audio.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "ImAudio.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - ImAudioRoot

@implementation ImAudioRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - ImAudioRoot_FileDescriptor

static GPBFileDescriptor *ImAudioRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"IM.Audio"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - IMAudioData

@implementation IMAudioData

@dynamic type;
@dynamic roomId;
@dynamic from;
@dynamic to;
@dynamic msg;
@dynamic audioData;

typedef struct IMAudioData__storage_ {
  uint32_t _has_storage_[1];
  uint32_t type;
  uint32_t roomId;
  NSString *from;
  NSString *to;
  NSString *msg;
  NSData *audioData;
} IMAudioData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = IMAudioData_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(IMAudioData__storage_, type),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = IMAudioData_FieldNumber_RoomId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(IMAudioData__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "from",
        .dataTypeSpecific.className = NULL,
        .number = IMAudioData_FieldNumber_From,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(IMAudioData__storage_, from),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "to",
        .dataTypeSpecific.className = NULL,
        .number = IMAudioData_FieldNumber_To,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(IMAudioData__storage_, to),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "msg",
        .dataTypeSpecific.className = NULL,
        .number = IMAudioData_FieldNumber_Msg,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(IMAudioData__storage_, msg),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "audioData",
        .dataTypeSpecific.className = NULL,
        .number = IMAudioData_FieldNumber_AudioData,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(IMAudioData__storage_, audioData),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[IMAudioData class]
                                     rootClass:[ImAudioRoot class]
                                          file:ImAudioRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(IMAudioData__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - IMAudioAck

@implementation IMAudioAck

@dynamic errCode;
@dynamic errMsg;

typedef struct IMAudioAck__storage_ {
  uint32_t _has_storage_[1];
  NSString *errCode;
  NSString *errMsg;
} IMAudioAck__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "errCode",
        .dataTypeSpecific.className = NULL,
        .number = IMAudioAck_FieldNumber_ErrCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(IMAudioAck__storage_, errCode),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "errMsg",
        .dataTypeSpecific.className = NULL,
        .number = IMAudioAck_FieldNumber_ErrMsg,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(IMAudioAck__storage_, errMsg),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[IMAudioAck class]
                                     rootClass:[ImAudioRoot class]
                                          file:ImAudioRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(IMAudioAck__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
