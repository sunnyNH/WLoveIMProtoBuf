// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IM.BaseDefine.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "ImBaseDefine.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - ImBaseDefineRoot

@implementation ImBaseDefineRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - Enum ServiceID

GPBEnumDescriptor *ServiceID_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "SidUnused\000SidLogin\000SidMsg\000SidGame\000SidAud"
        "io\000SidOther\000";
    static const int32_t values[] = {
        ServiceID_SidUnused,
        ServiceID_SidLogin,
        ServiceID_SidMsg,
        ServiceID_SidGame,
        ServiceID_SidAudio,
        ServiceID_SidOther,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(ServiceID)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:ServiceID_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL ServiceID_IsValidValue(int32_t value__) {
  switch (value__) {
    case ServiceID_SidUnused:
    case ServiceID_SidLogin:
    case ServiceID_SidMsg:
    case ServiceID_SidGame:
    case ServiceID_SidAudio:
    case ServiceID_SidOther:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum LoginCmdID

GPBEnumDescriptor *LoginCmdID_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "CidLoginUnused\000CidLoginReqUserlogin\000CidL"
        "oginResUserlogin\000CidLoginReqUserlogout\000C"
        "idLoginResUserlogout\000";
    static const int32_t values[] = {
        LoginCmdID_CidLoginUnused,
        LoginCmdID_CidLoginReqUserlogin,
        LoginCmdID_CidLoginResUserlogin,
        LoginCmdID_CidLoginReqUserlogout,
        LoginCmdID_CidLoginResUserlogout,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(LoginCmdID)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:LoginCmdID_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL LoginCmdID_IsValidValue(int32_t value__) {
  switch (value__) {
    case LoginCmdID_CidLoginUnused:
    case LoginCmdID_CidLoginReqUserlogin:
    case LoginCmdID_CidLoginResUserlogin:
    case LoginCmdID_CidLoginReqUserlogout:
    case LoginCmdID_CidLoginResUserlogout:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum MessageCmdID

GPBEnumDescriptor *MessageCmdID_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "CidMsgUnused\000CidMsgData\000CidMsgDataAck\000";
    static const int32_t values[] = {
        MessageCmdID_CidMsgUnused,
        MessageCmdID_CidMsgData,
        MessageCmdID_CidMsgDataAck,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(MessageCmdID)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:MessageCmdID_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL MessageCmdID_IsValidValue(int32_t value__) {
  switch (value__) {
    case MessageCmdID_CidMsgUnused:
    case MessageCmdID_CidMsgData:
    case MessageCmdID_CidMsgDataAck:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum GameCmdID

GPBEnumDescriptor *GameCmdID_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "CidGobangUnused\000CidGobangData\000CidGobangA"
        "ck\000";
    static const int32_t values[] = {
        GameCmdID_CidGobangUnused,
        GameCmdID_CidGobangData,
        GameCmdID_CidGobangAck,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(GameCmdID)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:GameCmdID_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL GameCmdID_IsValidValue(int32_t value__) {
  switch (value__) {
    case GameCmdID_CidGobangUnused:
    case GameCmdID_CidGobangData:
    case GameCmdID_CidGobangAck:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum AudioCmdID

GPBEnumDescriptor *AudioCmdID_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "CidAudioUnused\000CidAudioData\000CidAudioAck\000";
    static const int32_t values[] = {
        AudioCmdID_CidAudioUnused,
        AudioCmdID_CidAudioData,
        AudioCmdID_CidAudioAck,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(AudioCmdID)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:AudioCmdID_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL AudioCmdID_IsValidValue(int32_t value__) {
  switch (value__) {
    case AudioCmdID_CidAudioUnused:
    case AudioCmdID_CidAudioData:
    case AudioCmdID_CidAudioAck:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum OtherCmdID

GPBEnumDescriptor *OtherCmdID_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "CidOtherUnused\000CidOtherHeartbeat\000CidOthe"
        "rStopRecvPacket\000";
    static const int32_t values[] = {
        OtherCmdID_CidOtherUnused,
        OtherCmdID_CidOtherHeartbeat,
        OtherCmdID_CidOtherStopRecvPacket,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(OtherCmdID)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:OtherCmdID_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL OtherCmdID_IsValidValue(int32_t value__) {
  switch (value__) {
    case OtherCmdID_CidOtherUnused:
    case OtherCmdID_CidOtherHeartbeat:
    case OtherCmdID_CidOtherStopRecvPacket:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum ResultType

GPBEnumDescriptor *ResultType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Ok\000Refused\000";
    static const int32_t values[] = {
        ResultType_Ok,
        ResultType_Refused,
    };
    static const char *extraTextFormatInfo = "\001\000\002\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(ResultType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:ResultType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL ResultType_IsValidValue(int32_t value__) {
  switch (value__) {
    case ResultType_Ok:
    case ResultType_Refused:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum ClientType

GPBEnumDescriptor *ClientType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "ClientTypeUnknown\000ClientTypeAndroid\000Clie"
        "ntTypeIos\000ClientTypeWindows\000ClientTypeMa"
        "c\000ClientTypeWebim\000";
    static const int32_t values[] = {
        ClientType_ClientTypeUnknown,
        ClientType_ClientTypeAndroid,
        ClientType_ClientTypeIos,
        ClientType_ClientTypeWindows,
        ClientType_ClientTypeMac,
        ClientType_ClientTypeWebim,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(ClientType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:ClientType_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL ClientType_IsValidValue(int32_t value__) {
  switch (value__) {
    case ClientType_ClientTypeUnknown:
    case ClientType_ClientTypeAndroid:
    case ClientType_ClientTypeIos:
    case ClientType_ClientTypeWindows:
    case ClientType_ClientTypeMac:
    case ClientType_ClientTypeWebim:
      return YES;
    default:
      return NO;
  }
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
